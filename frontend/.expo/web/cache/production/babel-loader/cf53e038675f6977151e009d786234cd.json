{"ast":null,"code":"import*as React from'react';import{useNavigation}from'@react-navigation/native';export default function NavigationEvents(props){var navigation=useNavigation();var propsRef=React.useRef(props);React.useEffect(function(){propsRef.current=props;});React.useEffect(function(){var unsubFocus=navigation.addListener('focus',function(){var _propsRef$current$onW,_propsRef$current;(_propsRef$current$onW=(_propsRef$current=propsRef.current).onWillFocus)===null||_propsRef$current$onW===void 0?void 0:_propsRef$current$onW.call(_propsRef$current);});var unsubBlur=navigation.addListener('blur',function(){var _propsRef$current$onW2,_propsRef$current2;(_propsRef$current$onW2=(_propsRef$current2=propsRef.current).onWillBlur)===null||_propsRef$current$onW2===void 0?void 0:_propsRef$current$onW2.call(_propsRef$current2);});var unsubTransitionEnd=navigation.addListener('transitionEnd',function(){if(navigation.isFocused()){var _propsRef$current$onD,_propsRef$current3;(_propsRef$current$onD=(_propsRef$current3=propsRef.current).onDidFocus)===null||_propsRef$current$onD===void 0?void 0:_propsRef$current$onD.call(_propsRef$current3);}else{var _propsRef$current$onD2,_propsRef$current4;(_propsRef$current$onD2=(_propsRef$current4=propsRef.current).onDidBlur)===null||_propsRef$current$onD2===void 0?void 0:_propsRef$current$onD2.call(_propsRef$current4);}});return function(){unsubFocus();unsubBlur();unsubTransitionEnd();};},[navigation]);return null;}","map":{"version":3,"sources":["NavigationEvents.tsx"],"names":["navigation","useNavigation","propsRef","React","unsubFocus","unsubBlur","unsubTransitionEnd"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,aAAA,KAAA,0BAAA,CASA,cAAe,SAAA,CAAA,gBAAA,CAAA,KAAA,CAAwC,CACrD,GAAMA,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CACA,GAAMC,CAAAA,QAAQ,CAAGC,KAAK,CAALA,MAAAA,CAAjB,KAAiBA,CAAjB,CAEAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBD,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,CADFC,CAAAA,EAIAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,CAAAA,UAAU,CAAG,UAAU,CAAV,WAAA,CAAA,OAAA,CAAgC,UAAM,CAAA,GAAA,CAAA,qBAAA,CAAA,iBAAA,CACvD,CAAA,qBAAA,CAAA,CAAA,iBAAA,CAAA,QAAQ,CAAR,OAAA,EAAA,WAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CADF,CAAmB,CAAnB,CAIA,GAAMC,CAAAA,SAAS,CAAG,UAAU,CAAV,WAAA,CAAA,MAAA,CAA+B,UAAM,CAAA,GAAA,CAAA,sBAAA,CAAA,kBAAA,CACrD,CAAA,sBAAA,CAAA,CAAA,kBAAA,CAAA,QAAQ,CAAR,OAAA,EAAA,UAAA,IAAA,IAAA,EAAA,sBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,sBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,CANkB,CAKF,CAAlB,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,UAAU,CAAV,WAAA,CAAA,eAAA,CAAwC,UAAM,CACvE,GAAIN,UAAU,CAAd,SAAIA,EAAJ,CAA4B,CAAA,GAAA,CAAA,qBAAA,CAAA,kBAAA,CAC1B,CAAA,qBAAA,CAAA,CAAA,kBAAA,CAAA,QAAQ,CAAR,OAAA,EAAA,UAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,CADF,CAAA,IAEO,CAAA,GAAA,CAAA,sBAAA,CAAA,kBAAA,CACL,CAAA,sBAAA,CAAA,CAAA,kBAAA,CAAA,QAAQ,CAAR,OAAA,EAAA,SAAA,IAAA,IAAA,EAAA,sBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,sBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,CACD,CALH,CAA2B,CAA3B,CAQA,MAAO,WAAM,CACXI,UAAU,GACVC,SAAS,GACTC,kBAAkB,GAHpB,CAAA,CAlBFH,CAAAA,CAuBG,CAvBHA,UAuBG,CAvBHA,EAyBA,MAAA,KAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\n\ntype Props = {\n  onWillFocus?: () => void;\n  onDidFocus?: () => void;\n  onWillBlur?: () => void;\n  onDidBlur?: () => void;\n};\n\nexport default function NavigationEvents(props: Props) {\n  const navigation = useNavigation();\n  const propsRef = React.useRef(props);\n\n  React.useEffect(() => {\n    propsRef.current = props;\n  });\n\n  React.useEffect(() => {\n    const unsubFocus = navigation.addListener('focus', () => {\n      propsRef.current.onWillFocus?.();\n    });\n\n    const unsubBlur = navigation.addListener('blur', () => {\n      propsRef.current.onWillBlur?.();\n    });\n\n    // @ts-expect-error: transitionEnd may not exist on this navigator\n    const unsubTransitionEnd = navigation.addListener('transitionEnd', () => {\n      if (navigation.isFocused()) {\n        propsRef.current.onDidFocus?.();\n      } else {\n        propsRef.current.onDidBlur?.();\n      }\n    });\n\n    return () => {\n      unsubFocus();\n      unsubBlur();\n      unsubTransitionEnd();\n    };\n  }, [navigation]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}