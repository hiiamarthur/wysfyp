{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import{NavigationRouteContext}from'@react-navigation/native';import CompatScreen from\"./CompatScreen\";import ScreenPropsContext from\"./ScreenPropsContext\";import createCompatNavigationProp from\"./createCompatNavigationProp\";export default function createCompatNavigatorFactory(createNavigator){if(createNavigator.isCompat){throw new Error(\"The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.\");}var createCompatNavigator=function createCompatNavigator(routeConfig){var navigationConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var Pair=createNavigator();var order=navigationConfig.order,defaultNavigationOptions=navigationConfig.defaultNavigationOptions,parentNavigationOptions=navigationConfig.navigationOptions,restConfig=_objectWithoutProperties(navigationConfig,[\"order\",\"defaultNavigationOptions\",\"navigationOptions\"]);var routeNames=order!==undefined?order:Object.keys(routeConfig);function Navigator(_ref){var screenProps=_ref.screenProps;var _React$useContext;var parentRouteParams=(_React$useContext=React.useContext(NavigationRouteContext))===null||_React$useContext===void 0?void 0:_React$useContext.params;var screens=React.useMemo(function(){return routeNames.map(function(name){var getScreenComponent;var initialParams;var routeConfigItem=routeConfig[name];if('getScreen'in routeConfigItem){getScreenComponent=routeConfigItem.getScreen;initialParams=routeConfigItem.params;}else if('screen'in routeConfigItem){getScreenComponent=function getScreenComponent(){return routeConfigItem.screen;};initialParams=routeConfigItem.params;}else{getScreenComponent=function getScreenComponent(){return routeConfigItem;};}var screenOptions=function screenOptions(_ref2){var navigation=_ref2.navigation,route=_ref2.route;var routeNavigationOptions=routeConfigItem.navigationOptions;var screenNavigationOptions=getScreenComponent().navigationOptions;if(routeNavigationOptions==null&&screenNavigationOptions==null){return undefined;}var options=typeof routeNavigationOptions==='function'||typeof screenNavigationOptions==='function'?{navigation:createCompatNavigationProp(navigation,route,{}),navigationOptions:defaultNavigationOptions||{},screenProps:screenProps}:{};return _objectSpread(_objectSpread({},typeof routeNavigationOptions==='function'?routeNavigationOptions(options):routeNavigationOptions),typeof screenNavigationOptions==='function'?screenNavigationOptions(options):screenNavigationOptions);};return React.createElement(Pair.Screen,{key:name,name:name,initialParams:_objectSpread(_objectSpread({},parentRouteParams),initialParams),options:screenOptions},function(){return React.createElement(CompatScreen,{getComponent:getScreenComponent});});});},[parentRouteParams,screenProps]);return React.createElement(ScreenPropsContext.Provider,{value:screenProps},React.createElement(Pair.Navigator,_extends({},restConfig,{screenOptions:defaultNavigationOptions}),screens));}Navigator.navigationOptions=parentNavigationOptions;return Navigator;};Object.defineProperties(createCompatNavigator,{isCompat:{get:function get(){return true;}},router:{get:function get(){throw new Error(\"It's no longer possible to access the router with the 'router' property.\");},set:function set(){throw new Error(\"It's no longer possible to override the router by assigning the 'router' property.\");}}});return createCompatNavigator;}","map":{"version":3,"sources":["createCompatNavigatorFactory.tsx"],"names":["createNavigator","createCompatNavigator","navigationConfig","Pair","navigationOptions","restConfig","routeNames","order","Object","screenProps","parentRouteParams","React","screens","name","routeConfigItem","routeConfig","getScreenComponent","initialParams","screenOptions","route","routeNavigationOptions","screenNavigationOptions","options","navigation","createCompatNavigationProp","defaultNavigationOptions","Navigator","isCompat","get","router","set"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  TypedNavigator,\n  NavigationProp,\n  RouteProp,\n  NavigationRouteContext,\n} from '@react-navigation/native';\nimport CompatScreen from './CompatScreen';\nimport ScreenPropsContext from './ScreenPropsContext';\nimport createCompatNavigationProp from './createCompatNavigationProp';\nimport type { CompatScreenType, CompatRouteConfig } from './types';\n\nexport default function createCompatNavigatorFactory<\n  CreateNavigator extends () => TypedNavigator<\n    ParamListBase,\n    NavigationState,\n    {},\n    any,\n    React.ComponentType<any>\n  >\n>(createNavigator: CreateNavigator) {\n  // @ts-expect-error: isCompat may or may not exist\n  if (createNavigator.isCompat) {\n    throw new Error(\n      `The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.`\n    );\n  }\n\n  const createCompatNavigator = <\n    NavigationPropType extends NavigationProp<any, any, any, any, any>,\n    ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n      infer P,\n      any,\n      any,\n      any,\n      any\n    >\n      ? P\n      : ParamListBase,\n    ScreenOptions extends {} = NavigationPropType extends NavigationProp<\n      any,\n      any,\n      any,\n      infer O\n    >\n      ? O\n      : {},\n    NavigationConfig extends {} = React.ComponentProps<\n      ReturnType<CreateNavigator>['Navigator']\n    >\n  >(\n    routeConfig: CompatRouteConfig<NavigationPropType>,\n    navigationConfig: Partial<Omit<NavigationConfig, 'screenOptions'>> & {\n      order?: Extract<keyof ParamList, string>[];\n      defaultNavigationOptions?: ScreenOptions;\n      navigationOptions?: Record<string, any>;\n    } = {}\n  ) => {\n    const Pair = createNavigator();\n\n    const {\n      order,\n      defaultNavigationOptions,\n      navigationOptions: parentNavigationOptions,\n      ...restConfig\n    } = navigationConfig;\n\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator({ screenProps }: { screenProps?: unknown }) {\n      const parentRouteParams = React.useContext(NavigationRouteContext)\n        ?.params;\n\n      const screens = React.useMemo(\n        () =>\n          routeNames.map((name) => {\n            let getScreenComponent: () => CompatScreenType<NavigationPropType>;\n\n            let initialParams;\n\n            const routeConfigItem = routeConfig[name];\n\n            if ('getScreen' in routeConfigItem) {\n              getScreenComponent = routeConfigItem.getScreen;\n              initialParams = routeConfigItem.params;\n            } else if ('screen' in routeConfigItem) {\n              getScreenComponent = () => routeConfigItem.screen;\n              initialParams = routeConfigItem.params;\n            } else {\n              getScreenComponent = () => routeConfigItem;\n            }\n\n            const screenOptions = ({\n              navigation,\n              route,\n            }: {\n              navigation: NavigationPropType;\n              route: RouteProp<ParamList, keyof ParamList> & {\n                state?: NavigationState | PartialState<NavigationState>;\n              };\n            }) => {\n              // @ts-expect-error: navigationOptions may exists on the component, but TS is dumb\n              const routeNavigationOptions = routeConfigItem.navigationOptions;\n              const screenNavigationOptions = getScreenComponent()\n                .navigationOptions;\n\n              if (\n                routeNavigationOptions == null &&\n                screenNavigationOptions == null\n              ) {\n                return undefined;\n              }\n\n              const options =\n                typeof routeNavigationOptions === 'function' ||\n                typeof screenNavigationOptions === 'function'\n                  ? {\n                      navigation: createCompatNavigationProp<\n                        NavigationPropType,\n                        ParamList\n                      >(navigation, route, {}),\n                      navigationOptions: defaultNavigationOptions || {},\n                      screenProps,\n                    }\n                  : {};\n\n              return {\n                ...(typeof routeNavigationOptions === 'function'\n                  ? routeNavigationOptions(options)\n                  : routeNavigationOptions),\n                ...(typeof screenNavigationOptions === 'function'\n                  ? (screenNavigationOptions as (o: any) => ScreenOptions)(\n                      options\n                    )\n                  : screenNavigationOptions),\n              } as ScreenOptions;\n            };\n\n            return (\n              <Pair.Screen\n                key={name}\n                name={name}\n                initialParams={{ ...parentRouteParams, ...initialParams }}\n                options={screenOptions}\n              >\n                {() => <CompatScreen getComponent={getScreenComponent} />}\n              </Pair.Screen>\n            );\n          }),\n        [parentRouteParams, screenProps]\n      );\n\n      return (\n        <ScreenPropsContext.Provider value={screenProps}>\n          <Pair.Navigator\n            {...(restConfig as NavigationConfig)}\n            screenOptions={defaultNavigationOptions}\n          >\n            {screens}\n          </Pair.Navigator>\n        </ScreenPropsContext.Provider>\n      );\n    }\n\n    Navigator.navigationOptions = parentNavigationOptions;\n\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      },\n    },\n    router: {\n      get() {\n        throw new Error(\n          \"It's no longer possible to access the router with the 'router' property.\"\n        );\n      },\n      set() {\n        throw new Error(\n          \"It's no longer possible to override the router by assigning the 'router' property.\"\n        );\n      },\n    },\n  });\n\n  return createCompatNavigator;\n}\n"]},"metadata":{},"sourceType":"module"}