{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Platform,UnavailabilityError}from'@unimodules/core';import ExpoNetwork from\"./ExpoNetwork\";import{NetworkStateType}from\"./Network.types\";export{NetworkStateType};export function getNetworkStateAsync(){return _regeneratorRuntime.async(function getNetworkStateAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(ExpoNetwork.getNetworkStateAsync){_context.next=2;break;}throw new UnavailabilityError('expo-network','getNetworkStateAsync');case 2:_context.next=4;return _regeneratorRuntime.awrap(ExpoNetwork.getNetworkStateAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getIpAddressAsync(){return _regeneratorRuntime.async(function getIpAddressAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(ExpoNetwork.getIpAddressAsync){_context2.next=2;break;}throw new UnavailabilityError('expo-network','getIpAddressAsync');case 2:_context2.next=4;return _regeneratorRuntime.awrap(ExpoNetwork.getIpAddressAsync());case 4:return _context2.abrupt(\"return\",_context2.sent);case 5:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function getMacAddressAsync(){var interfaceName,_args3=arguments;return _regeneratorRuntime.async(function getMacAddressAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:interfaceName=_args3.length>0&&_args3[0]!==undefined?_args3[0]:null;if(ExpoNetwork.getMacAddressAsync){_context3.next=3;break;}throw new UnavailabilityError('expo-network','getMacAddressAsync');case 3:if(!(Platform.OS==='android')){_context3.next=9;break;}_context3.next=6;return _regeneratorRuntime.awrap(ExpoNetwork.getMacAddressAsync(interfaceName));case 6:return _context3.abrupt(\"return\",_context3.sent);case 9:_context3.next=11;return _regeneratorRuntime.awrap(ExpoNetwork.getMacAddressAsync());case 11:return _context3.abrupt(\"return\",_context3.sent);case 12:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function isAirplaneModeEnabledAsync(){return _regeneratorRuntime.async(function isAirplaneModeEnabledAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(ExpoNetwork.isAirplaneModeEnabledAsync){_context4.next=2;break;}throw new UnavailabilityError('expo-network','isAirplaneModeEnabledAsync');case 2:_context4.next=4;return _regeneratorRuntime.awrap(ExpoNetwork.isAirplaneModeEnabledAsync());case 4:return _context4.abrupt(\"return\",_context4.sent);case 5:case\"end\":return _context4.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/Network.ts"],"names":[],"mappings":"4DAAA,OAAS,QAAT,CAAmB,mBAAnB,KAA8C,kBAA9C,CAEA,MAAO,CAAA,WAAP,qBACA,OAAuB,gBAAvB,uBAEA,OAAuB,gBAAvB,EAEA,MAAO,SAAe,CAAA,oBAAf,oIACA,WAAW,CAAC,oBADZ,8BAEG,IAAI,CAAA,mBAAJ,CAAwB,cAAxB,CAAwC,sBAAxC,CAFH,yDAIQ,WAAW,CAAC,oBAAZ,EAJR,6HAOP,MAAO,SAAe,CAAA,iBAAf,oIACA,WAAW,CAAC,iBADZ,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,cAAxB,CAAwC,mBAAxC,CAFH,0DAIQ,WAAW,CAAC,iBAAZ,EAJR,gIAOP,MAAO,SAAe,CAAA,kBAAf,qKAAkC,aAAlC,kDAAiE,IAAjE,IACA,WAAW,CAAC,kBADZ,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,cAAxB,CAAwC,oBAAxC,CAFH,aAID,QAAQ,CAAC,EAAT,GAAgB,SAJf,6EAKU,WAAW,CAAC,kBAAZ,CAA+B,aAA/B,CALV,oHAOU,WAAW,CAAC,kBAAZ,EAPV,kIAWP,MAAO,SAAe,CAAA,0BAAf,6IACA,WAAW,CAAC,0BADZ,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,cAAxB,CAAwC,4BAAxC,CAFH,0DAIQ,WAAW,CAAC,0BAAZ,EAJR","sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoNetwork from './ExpoNetwork';\nimport { NetworkState, NetworkStateType } from './Network.types';\n\nexport { NetworkState, NetworkStateType };\n\nexport async function getNetworkStateAsync(): Promise<NetworkState> {\n  if (!ExpoNetwork.getNetworkStateAsync) {\n    throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n  }\n  return await ExpoNetwork.getNetworkStateAsync();\n}\n\nexport async function getIpAddressAsync(): Promise<string> {\n  if (!ExpoNetwork.getIpAddressAsync) {\n    throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n  }\n  return await ExpoNetwork.getIpAddressAsync();\n}\n\nexport async function getMacAddressAsync(interfaceName: string | null = null): Promise<string> {\n  if (!ExpoNetwork.getMacAddressAsync) {\n    throw new UnavailabilityError('expo-network', 'getMacAddressAsync');\n  }\n  if (Platform.OS === 'android') {\n    return await ExpoNetwork.getMacAddressAsync(interfaceName);\n  } else {\n    return await ExpoNetwork.getMacAddressAsync();\n  }\n}\n\nexport async function isAirplaneModeEnabledAsync(): Promise<boolean> {\n  if (!ExpoNetwork.isAirplaneModeEnabledAsync) {\n    throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n  }\n  return await ExpoNetwork.isAirplaneModeEnabledAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}