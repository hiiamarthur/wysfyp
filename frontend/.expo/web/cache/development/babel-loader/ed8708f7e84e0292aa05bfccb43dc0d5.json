{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as t from \"./actionTypes\";\nimport { service } from \"../service\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\n\nvar setLoginState = function setLoginState(loginData) {\n  return {\n    type: t.SET_LOGIN_STATE,\n    payload: loginData\n  };\n};\n\nexport function login(loginInput) {\n  var username, password;\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          username = loginInput.username, password = loginInput.password;\n          console.log('xd');\n          console.log(loginInput);\n          return _context.abrupt(\"return\", function (dispatch) {\n            return axios.post('http://10.0.0.2:3000/auth/login', JSON.stringify(loginInput)).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.msg === 'success') {\n                dispatch(setLoginState(_objectSpread(_objectSpread({}, json), {}, {\n                  userId: username\n                })));\n              } else {\n                Alert.alert('Login Failed', 'Username or Password is incorrect');\n              }\n            }).catch(function (err) {\n              Alert.alert('Login Failed', 'Some error occured, please retry');\n              console.log(err);\n            });\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n;","map":{"version":3,"sources":["/Users/yhlau/Arthur/project/wysfyp/frontend/plugin/redux/action.js"],"names":["t","service","axios","setLoginState","loginData","type","SET_LOGIN_STATE","payload","login","loginInput","username","password","console","log","dispatch","post","JSON","stringify","then","response","json","msg","userId","Alert","alert","catch","err"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,CAAZ;AAEA,SAAOC,OAAP;;AAIA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEL,CAAC,CAACM,eADH;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALH;;AASA,OAAO,SAAeI,KAAf,CAAqBC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,QADH,GAC0BD,UAD1B,CACGC,QADH,EACaC,QADb,GAC0BF,UAD1B,CACaE,QADb;AAELC,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AAHK,2CAWE,UAAUK,QAAV,EAAoB;AACzB,mBAAOZ,KAAK,CAACa,IAAN,CAAW,iCAAX,EAA8CC,IAAI,CAACC,SAAL,CAAeR,UAAf,CAA9C,EACJS,IADI,CACC,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,aADD,EAEJF,IAFI,CAEC,UAACE,IAAD,EAAU;AACd,kBAAIA,IAAI,CAACC,GAAL,KAAa,SAAjB,EAA4B;AAC1BP,gBAAAA,QAAQ,CAACX,aAAa,iCAAMiB,IAAN;AAAYE,kBAAAA,MAAM,EAAEZ;AAApB,mBAAd,CAAR;AACD,eAFD,MAEO;AACLa,gBAAAA,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B,mCAA5B;AACD;AACF,aARI,EASJC,KATI,CASE,UAACC,GAAD,EAAS;AACdH,cAAAA,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B,kCAA5B;AACAZ,cAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACD,aAZI,CAAP;AAuCD,WAnDI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoDN","sourcesContent":["import * as t from './actionTypes';\n\nimport{service} from '../service';\n\nimport { Alert } from 'react-native'; // to show alerts in app\n\nimport axios from \"axios\";\n\n// this is what our action should look like which dispatches the \"payload\" to reducer\nconst setLoginState = (loginData) => {\n    return {\n      type: t.SET_LOGIN_STATE,\n      payload: loginData,\n    };\n  };\n// export function login(input){\n//   console.log(input);\n// }\nexport async function login(loginInput){\n  const { username, password } = loginInput;\n  console.log('xd');\n  console.log(loginInput);\n  // return axios.post('http://localhost:3000/auth/login',loginInput)\n  //   .then((res) => {\n  //     console.log(res.data)\n  // }).catch((error) => {\n  //     console.log(error)\n  // });\n\n  return function (dispatch) {  // don't forget to use dispatch here!\n    return axios.post('http://10.0.0.2:3000/auth/login', JSON.stringify(loginInput))\n      .then((response) => response.json())\n      .then((json) => {\n        if (json.msg === 'success') { // response success checking logic could differ\n          dispatch(setLoginState({ ...json, userId: username })); // our action is called here\n        } else {\n          Alert.alert('Login Failed', 'Username or Password is incorrect');\n        }\n      })\n      .catch((err) => {\n        Alert.alert('Login Failed', 'Some error occured, please retry');\n        console.log(err);\n      });\n    // return await service\n    // .post('/auth/login',{\n    //   username:loginInput.username,\n    //   password:loginInput.password\n    // }).then(res => {\n    //   // if the credential are correct\n    //   if (res.data.success) {\n    //     // assign the variables to state by the function 'login' in mutation\n    //     // context.commit(\"login\", {\n    //     //   token: res.data.data.token,\n    //     //   user: res.data.data.userInfo[0],\n    //     //   exp: Math.floor(Date.now() / 1000) + 60 * 360\n    //     // });\n    //     // // return the user information to have a signal\n    //     // return res.data.data.user;\n    //   } else {\n    //     // // activate the function 'logout' in mutation\n    //     // context.commit(\"logout\");\n    //     // // throw error\n    //     // throw \"Wrong username or password\";\n    //   }\n    // }).catch(err=>{\n    //   throw err;\n    // })\n    \n    \n  };\n};"]},"metadata":{},"sourceType":"module"}