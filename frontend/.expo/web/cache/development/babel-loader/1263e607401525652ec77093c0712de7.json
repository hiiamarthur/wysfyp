{"ast":null,"code":"import * as t from \"./actionTypes\";\nimport { service } from \"../service\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nimport { userConstants } from \"../_constants/user.constants\";\nimport { auth } from \"../firebase\";\nimport { network } from \"../global\";\nimport Constants from \"expo-constants\";\nvar manifest = Constants.manifest;\nvar url = typeof manifest.packagerOpts === \"object\" && manifest.packagerOpts.dev ? manifest.debuggerHost.split(\":\").shift().concat(\":3000\") : \"api.example.com\";\nvar ipx, ipy;\nexport var actions = {\n  login: login,\n  logout: logout,\n  register: register,\n  getAccountInfo: getAccountInfo,\n  delete: _delete\n};\n\nfunction setLoginState(loginData) {\n  return {\n    type: t.LOGIN_REQUEST,\n    payload: loginData\n  };\n}\n\n;\n\nfunction login(username, password, navigation, name) {\n  console.log(\"login action started\");\n  var loginInput = {\n    \"username\": username,\n    \"password\": password\n  };\n  return function (dispatch) {\n    return service.post('/auth/login', loginInput).then(function (res) {\n      console.log('xd');\n      console.log(res.data);\n\n      if (res.data.success) {\n        dispatch(setLoginState({\n          username: loginInput.username\n        }));\n        navigation.replace(name);\n      } else {\n        Alert.alert('Login Failed', 'Username or Password is incorrect');\n      }\n    }).catch(function (err) {\n      Alert.alert('Login Failed', 'Some error occured, please retry');\n      console.log(err);\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction logout() {\n  console.log(\"logout action started!\");\n  return function (dispatch) {\n    dispatch(setLogoutState());\n  };\n\n  function setLogoutState() {\n    return {\n      type: t.LOGOUT,\n      payload: null\n    };\n  }\n\n  ;\n}\n\nfunction register(username, password, email) {\n  console.log(\"register action started!\");\n  var registerInfo = {\n    username: username,\n    password: password,\n    email: email\n  };\n  return function (dispatch) {\n    dispatch(request(username));\n    return service.post('/auth/signUp', registerInfo).then(function (res) {\n      console.log(res.data);\n\n      if (res.data) {\n        console.log(\"registration successful!\");\n      } else {\n        Alert.alert('Register Failed', 'Username or Password is incorrect');\n      }\n    }).catch(function (err) {\n      Alert.alert('Register Failed', 'Some error occured, please retry');\n      console.log(err);\n    });\n  };\n\n  function request(username) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      username: username\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction getAccountInfo(inquireInfo, type) {\n  console.log(\"get AccountInfo action started!\");\n  console.log(inquireInfo);\n  console.log(\"/auth/queryAccountInform/inquireInfo=\" + inquireInfo);\n  return service.get(\"/auth/queryAccountInform/inquireInfo=\" + inquireInfo + \"/type=\" + type).then(function (res) {\n    if (res.data.data._size) {\n      Alert.alert('Register Error', 'Username duplicated');\n      return {\n        status: false,\n        message: \"\"\n      };\n    } else {\n      return {\n        status: true,\n        message: \"\"\n      };\n    }\n  }).catch(function (err) {\n    console.log(err);\n  });\n\n  function request(username) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      username: username\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction getAll() {\n  return function (dispatch) {\n    dispatch(request());\n    userService.getAll().then(function (users) {\n      return dispatch(success(users));\n    }, function (error) {\n      return dispatch(failure(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users: users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction _delete(id) {\n  return function (dispatch) {\n    dispatch(request(id));\n    userService.delete(id).then(function (user) {\n      return dispatch(success(id));\n    }, function (error) {\n      return dispatch(failure(id, error.toString()));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id: id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id: id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id: id,\n      error: error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/yhlau/Arthur/project/wysfyp/frontend/plugin/redux/action.js"],"names":["t","service","axios","userConstants","auth","network","Constants","manifest","url","packagerOpts","dev","debuggerHost","split","shift","concat","ipx","ipy","actions","login","logout","register","getAccountInfo","delete","_delete","setLoginState","loginData","type","LOGIN_REQUEST","payload","username","password","navigation","name","console","log","loginInput","dispatch","post","then","res","data","success","replace","Alert","alert","catch","err","request","user","LOGIN_SUCCESS","failure","error","LOGIN_FAILURE","setLogoutState","LOGOUT","email","registerInfo","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","inquireInfo","get","_size","status","message","getAll","userService","users","toString","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import * as t from './actionTypes';\n\nimport{service} from '../service';\n\nimport { Alert } from 'react-native'; // to show alerts in app\n\nimport axios from \"axios\";\nimport {userConstants} from \"../_constants/user.constants\";\nimport {auth}from \"../firebase\";\nimport {network} from '../global';\nimport Constants from \"expo-constants\";\nconst { manifest } = Constants;\n\nconst url = (typeof manifest.packagerOpts === `object`) && manifest.packagerOpts.dev\n  ? manifest.debuggerHost.split(`:`).shift().concat(`:3000`)\n  : `api.example.com`;\n\n// Get Local IP\nvar ipx,ipy;\n\n// this is what our action should look like which dispatches the \"payload\" to reducer\n\nexport const actions = {\n  login,\n  logout,\n  register,\n  getAccountInfo,\n  delete: _delete\n};\n  \nfunction setLoginState(loginData){\n  return {\n    type: t.LOGIN_REQUEST,\n    payload: loginData,\n  };\n};\n  function login(username, password, navigation,name) {\n    console.log(\"login action started\");\n    const loginInput = {\"username\":username,\"password\":password};\n    return dispatch => {\n        // dispatch(request({ username }));\n\n        // userService.login(username, password)\n        //     .then(\n        //         user => { \n        //             dispatch(success(user));\n        //             history.push(from);\n        //         },\n        //         error => {\n        //             dispatch(failure(error.toString()));\n        //             dispatch(alertActions.error(error.toString()));\n        //         }\n        //     );\n        return service.post('/auth/login',loginInput)\n            .then((res) => {\n              console.log('xd');\n              console.log(res.data);\n              if(res.data.success){\n                dispatch(setLoginState({username:loginInput.username}));\n                // dispatch(success(user));\n                navigation.replace(name);\n              }\n              else {\n                // dispatch(failure(error.toString()));\n                Alert.alert('Login Failed', 'Username or Password is incorrect');\n          }\n        })\n        .catch((err) => {\n          Alert.alert('Login Failed', 'Some error occured, please retry');\n          console.log(err);\n        });\n    };\n    \n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\nfunction logout() {\n  console.log(\"logout action started!\")\n  return dispatch => {dispatch(setLogoutState())};\n  \n\n  function setLogoutState(){return {type:t.LOGOUT,payload: null}};\n}\n\nfunction register(username,password,email) {\n  console.log(\"register action started!\")\n  let registerInfo = {\n    username:username,\n    password:password,\n    email:email\n  }\n  return dispatch => {\n      dispatch(request(username));\n\n      return service.post('/auth/signUp',registerInfo)\n            .then((res) => {\n              console.log(res.data)\n              if(res.data){\n                console.log(\"registration successful!\");\n                // dispatch(success);\n                // dispatch(success(user));\n              }\n              else {\n                // dispatch(failure(error.toString()));\n                Alert.alert('Register Failed', 'Username or Password is incorrect');\n          }\n        })\n        .catch((err) => {\n          Alert.alert('Register Failed', 'Some error occured, please retry');\n          console.log(err);\n        });\n  };\n\n  function request(username) { return { type: userConstants.REGISTER_REQUEST, username } }\n  function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAccountInfo(inquireInfo,type) {\n  console.log(\"get AccountInfo action started!\");\n  console.log(inquireInfo);\n  console.log(`/auth/queryAccountInform/inquireInfo=${inquireInfo}`);\n  // let registerInfo = {\n  //   username:username,\n  //   password:password,\n  //   email:email\n  // }\n  // return dispatch => {\n  //     dispatch(request(username));\n      return service.get(`/auth/queryAccountInform/inquireInfo=${inquireInfo}/type=${type}`)\n            .then((res) => {\n              // console.log(res.data.data._size);\n              if(res.data.data._size){\n                // console.log(\"registration successful!\");\n                // dispatch(success);\n                // dispatch(success(user));\n                Alert.alert('Register Error', 'Username duplicated');\n                return {status:false,message:\"\"}\n              }\n              else {\n                return {status:true,message:\"\"}\n                // dispatch(failure(error.toString()));\n                // Alert.alert('Register Failed', 'Username or Password is incorrect');\n          }\n        })\n        .catch((err) => {\n          // Alert.alert('Register Failed', 'Some error occured, please retry');\n          console.log(err);\n        });\n  // };\n\n  function request(username) { return { type: userConstants.REGISTER_REQUEST, username } }\n  function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAll() {\n  return dispatch => {\n      dispatch(request());\n\n      userService.getAll()\n          .then(\n              users => dispatch(success(users)),\n              error => dispatch(failure(error.toString()))\n          );\n  };\n\n  function request() { return { type: userConstants.GETALL_REQUEST } }\n  function success(users) { return { type: userConstants.GETALL_SUCCESS, users } }\n  function failure(error) { return { type: userConstants.GETALL_FAILURE, error } }\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  return dispatch => {\n      dispatch(request(id));\n\n      userService.delete(id)\n          .then(\n              user => dispatch(success(id)),\n              error => dispatch(failure(id, error.toString()))\n          );\n  };\n\n  function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\n  function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\n  function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\n}\n\n\n// export const login = (loginInput,dispatch) => {\n//   const { username, password } = loginInput;\n//   //this.getIPAddress();\n//   // console.log(ipx);\n//   // console.log(ipy);\n  \n//   // network.getIpAddressAsync().then((v)=>{console.log(v)})\n//   // network.getMacAddressAsync().then((v)=>{console.log(v)})\n//   // console.log(Constants.experienceUrl);\n//   // console.log(url);\n//   // console.log('xd1');\n//   // console.log(loginInput);\n//   return service.post('/auth/login',loginInput)\n//     .then((res) => {\n//       console.log(res.data)\n//       dispatch(setLoginState());\n//   }).catch((error) => {\n//       console.log(error)\n//   });\n\n//   // return (dispatch) => {  // don't forget to use dispatch here!\n//   //   service.post('/auth/login', loginInput)\n//   //   .then(function (response) {\n//   //     console.log(response);\n\n//   //     // and create action obj here\n//   //     dispatch(setLoginState());\n//   // })\n//   // .catch(function (error) {\n//   //     throw error;\n//   //     console.log(error);\n//   // });\n// //     // return await service\n// //     // .post('/auth/login',{\n// //     //   username:loginInput.username,\n// //     //   password:loginInput.password\n// //     // }).then(res => {\n// //     //   // if the credential are correct\n// //     //   if (res.data.success) {\n// //     //     // assign the variables to state by the function 'login' in mutation\n// //     //     // context.commit(\"login\", {\n// //     //     //   token: res.data.data.token,\n// //     //     //   user: res.data.data.userInfo[0],\n// //     //     //   exp: Math.floor(Date.now() / 1000) + 60 * 360\n// //     //     // });\n// //     //     // // return the user information to have a signal\n// //     //     // return res.data.data.user;\n// //     //   } else {\n// //     //     // // activate the function 'logout' in mutation\n// //     //     // context.commit(\"logout\");\n// //     //     // // throw error\n// //     //     // throw \"Wrong username or password\";\n// //     //   }\n// //     // }).catch(err=>{\n// //     //   throw err;\n// //     // })\n// //     // \n    \n// //   };\n// };\n\n// // export const login = (loginInput) => {\n// //     console.log('xd');\n// //   console.log(loginInput);\n// //   //const { username, password } = loginInput;\n// //   return (dispatch) => {  // don't forget to use dispatch here!\n// //     return axios.post(\"http://localhost:3000/auth/login\",loginInput)\n// //     .then(res => {\n// //       if (res.status == 201){\n// //        navigation.navigate('Home')\n// //        storeData(res.data)\n// //       }else {\n// //         Alert.alert('Wrong email or password')\n// //       }\n// //     })\n// //     .catch(function(error) {\n// //       console.log(error.message);\n// //         throw error;\n// //       })\n// //   };\n// // };"]},"metadata":{},"sourceType":"module"}