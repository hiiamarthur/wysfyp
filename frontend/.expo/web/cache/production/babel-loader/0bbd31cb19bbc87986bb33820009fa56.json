{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as helpers from\"./helpers\";export default function createCompatNavigationProp(navigation,state,context,_isFirstRouteInParent){var _state$params;context.parent=context.parent||{};context.subscriptions=context.subscriptions||{didFocus:new Map(),didBlur:new Map(),refocus:new Map()};return _objectSpread(_objectSpread(_objectSpread({},navigation),Object.entries(helpers).reduce(function(acc,_ref){var _ref2=_slicedToArray(_ref,2),name=_ref2[0],method=_ref2[1];if(name in navigation){acc[name]=function(){return navigation.dispatch(method.apply(void 0,arguments));};}return acc;},{})),{},{original:navigation,addListener:function addListener(type,callback){var unsubscribe;switch(type){case'willFocus':unsubscribe=navigation.addListener('focus',callback);break;case'willBlur':unsubscribe=navigation.addListener('blur',callback);break;case'didFocus':{var listener=function listener(){if(navigation.isFocused()){callback();}};unsubscribe=navigation.addListener('transitionEnd',listener);context.subscriptions.didFocus.set(callback,unsubscribe);break;}case'didBlur':{var _listener=function _listener(){if(!navigation.isFocused()){callback();}};unsubscribe=navigation.addListener('transitionEnd',_listener);context.subscriptions.didBlur.set(callback,unsubscribe);break;}case'refocus':{var _listener2=function _listener2(){if(navigation.isFocused()){callback();}};unsubscribe=navigation.addListener('tabPress',_listener2);context.subscriptions.refocus.set(callback,unsubscribe);break;}case'action':throw new Error(\"Listening to 'action' events is not supported.\");default:unsubscribe=navigation.addListener(type,callback);}var subscription=function subscription(){return unsubscribe();};subscription.remove=unsubscribe;return subscription;},removeListener:function removeListener(type,callback){context.subscriptions=context.subscriptions||{};switch(type){case'willFocus':navigation.removeListener('focus',callback);break;case'willBlur':navigation.removeListener('blur',callback);break;case'didFocus':{var unsubscribe=context.subscriptions.didFocus.get(callback);unsubscribe===null||unsubscribe===void 0?void 0:unsubscribe();break;}case'didBlur':{var _unsubscribe=context.subscriptions.didBlur.get(callback);_unsubscribe===null||_unsubscribe===void 0?void 0:_unsubscribe();break;}case'refocus':{var _unsubscribe2=context.subscriptions.refocus.get(callback);_unsubscribe2===null||_unsubscribe2===void 0?void 0:_unsubscribe2();break;}case'action':throw new Error(\"Listening to 'action' events is not supported.\");default:navigation.removeListener(type,callback);}},state:{key:state.key,routeName:state.name,params:(_state$params=state.params)!==null&&_state$params!==void 0?_state$params:{},get index(){var _state$state;if(state.index!==undefined){return state.index;}console.warn(\"Looks like you are using 'navigation.state.index' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'index' property in the child navigation state.\");return(_state$state=state.state)===null||_state$state===void 0?void 0:_state$state.index;},get routes(){var _state$state2;if(state.routes!==undefined){return state.routes;}console.warn(\"Looks like you are using 'navigation.state.routes' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'routes' property in the child navigation state.\");return(_state$state2=state.state)===null||_state$state2===void 0?void 0:_state$state2.routes;}},getParam:function getParam(paramName,defaultValue){var params=state.params;if(params&&paramName in params){return params[paramName];}return defaultValue;},isFirstRouteInParent:function isFirstRouteInParent(){if(typeof _isFirstRouteInParent==='boolean'){return _isFirstRouteInParent;}var _navigation$dangerous=navigation.dangerouslyGetState(),routes=_navigation$dangerous.routes;return routes[0].key===state.key;},dangerouslyGetParent:function dangerouslyGetParent(){var parent=navigation.dangerouslyGetParent();if(parent){return createCompatNavigationProp(parent,navigation.dangerouslyGetState(),context.parent);}return undefined;}});}","map":{"version":3,"sources":["createCompatNavigationProp.tsx"],"names":["context","didFocus","didBlur","refocus","name","acc","navigation","method","original","addListener","unsubscribe","listener","callback","subscription","removeListener","state","key","routeName","params","console","getParam","paramName","isFirstRouteInParent","routes","dangerouslyGetParent","parent","createCompatNavigationProp"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  NavigationProp,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as helpers from './helpers';\nimport type { CompatNavigationProp } from './types';\n\ntype EventName =\n  | 'action'\n  | 'willFocus'\n  | 'willBlur'\n  | 'didFocus'\n  | 'didBlur'\n  | 'refocus';\n\nexport default function createCompatNavigationProp<\n  NavigationPropType extends NavigationProp<ParamListBase>,\n  ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n    infer P,\n    any,\n    any,\n    any,\n    any\n  >\n    ? P\n    : ParamListBase\n>(\n  navigation: NavigationPropType,\n  state:\n    | (RouteProp<ParamList, keyof ParamList> & {\n        state?: NavigationState | PartialState<NavigationState>;\n      })\n    | NavigationState\n    | PartialState<NavigationState>,\n  context: Record<string, any>,\n  isFirstRouteInParent?: boolean\n): CompatNavigationProp<NavigationPropType> {\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map<() => void, () => void>(),\n    didBlur: new Map<() => void, () => void>(),\n    refocus: new Map<() => void, () => void>(),\n  };\n\n  return {\n    ...navigation,\n    ...Object.entries(helpers).reduce<{\n      [key: string]: (...args: any[]) => void;\n    }>((acc, [name, method]: [string, Function]) => {\n      if (name in navigation) {\n        acc[name] = (...args: any[]) => navigation.dispatch(method(...args));\n      }\n\n      return acc;\n    }, {}),\n    original: navigation,\n    addListener(type: EventName, callback: () => void) {\n      let unsubscribe: () => void;\n\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didFocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'didBlur': {\n          const listener = () => {\n            if (!navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didBlur.set(callback, unsubscribe);\n          break;\n        }\n        case 'refocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('tabPress', listener);\n          context.subscriptions.refocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          unsubscribe = navigation.addListener(type, callback);\n      }\n\n      const subscription = () => unsubscribe();\n\n      subscription.remove = unsubscribe;\n\n      return subscription;\n    },\n    removeListener(type: EventName, callback: () => void) {\n      context.subscriptions = context.subscriptions || {};\n\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const unsubscribe = context.subscriptions.didFocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'didBlur': {\n          const unsubscribe = context.subscriptions.didBlur.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'refocus': {\n          const unsubscribe = context.subscriptions.refocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: {\n      key: state.key,\n      // @ts-expect-error\n      routeName: state.name,\n      // @ts-expect-error\n      params: state.params ?? {},\n      get index() {\n        // @ts-expect-error\n        if (state.index !== undefined) {\n          // @ts-expect-error\n          return state.index;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.index' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'index' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.index;\n      },\n      get routes() {\n        // @ts-expect-error\n        if (state.routes !== undefined) {\n          // @ts-expect-error\n          return state.routes;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.routes' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'routes' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.routes;\n      },\n    },\n    getParam<T extends keyof ParamList>(\n      paramName: T,\n      defaultValue: ParamList[T]\n    ): ParamList[T] {\n      // @ts-expect-error\n      const params = state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    isFirstRouteInParent(): boolean {\n      if (typeof isFirstRouteInParent === 'boolean') {\n        return isFirstRouteInParent;\n      }\n\n      const { routes } = navigation.dangerouslyGetState();\n\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent() {\n      const parent = navigation.dangerouslyGetParent();\n\n      if (parent) {\n        return createCompatNavigationProp(\n          parent,\n          navigation.dangerouslyGetState(),\n          context.parent\n        );\n      }\n\n      return undefined;\n    },\n  } as any;\n}\n"]},"metadata":{},"sourceType":"module"}