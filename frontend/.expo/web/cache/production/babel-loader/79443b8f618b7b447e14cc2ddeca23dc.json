{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{CommonActions}from'@react-navigation/native';export function navigate(_ref){var routeName=_ref.routeName,params=_ref.params,key=_ref.key,action=_ref.action;if(action!==undefined){throw new Error('Sub-actions are not supported for `navigate`. Remove the `action` key from the options.');}return CommonActions.navigate({name:routeName,key:key,params:params});}export function back(options){return(options===null||options===void 0?void 0:options.key)!=null?function(state){return _objectSpread(_objectSpread({},CommonActions.goBack()),{},{source:options.key,target:state.key});}:CommonActions.goBack();}export function setParams(_ref2){var params=_ref2.params,key=_ref2.key;return _objectSpread(_objectSpread({},CommonActions.setParams(params)),key!==undefined?{source:key}:null);}","map":{"version":3,"sources":["NavigationActions.tsx"],"names":["action","name","key","params","state","CommonActions","source","options","target"],"mappings":"+1BAAA,OAAA,aAAA,KAAA,0BAAA,CAEA,MAAO,SAAA,CAAA,QAAA,MAUkB,IAVA,CAAA,SAUA,MAVA,SAUA,CAVA,MAUA,MAVA,MAUA,CAVA,GAUA,MAVA,GAUA,CANvBA,MAMuB,MANvBA,MAMuB,CACvB,GAAIA,MAAM,GAAV,SAAA,CAA0B,CACxB,KAAM,IAAA,CAAA,KAAA,CAAN,yFAAM,CAAN,CAGD,CAED,MAAO,CAAA,aAAa,CAAb,QAAA,CAAuB,CAC5BC,IAAI,CADwB,SAAA,CAE5BC,GAAG,CAFyB,GAAA,CAG5BC,MAAM,CAAEA,MAHoB,CAAvB,CAAP,CAKD,CAED,MAAO,SAAA,CAAA,IAAA,CAAA,OAAA,CAAiD,CACtD,MAAO,CAAA,OAAO,GAAP,IAAA,EAAA,OAAO,GAAA,IAAP,EAAA,CAAA,IAAA,EAAA,CAAA,OAAO,CAAP,GAAA,GAAA,IAAA,CACFC,SAAAA,KAAD,wCACKC,aAAa,CADW,MACxBA,EADL,MAEEC,MAAM,CAAEC,OAAO,CAFY,GAA7B,CAGEC,MAAM,CAAEJ,KAAK,CAACF,GAHhB,IADG,CAMHG,aAAa,CANjB,MAMIA,EANJ,CAOD,CAED,MAAO,SAAA,CAAA,SAAA,OAMkB,IANC,CAAA,MAMD,OANC,MAMD,CAJvBH,GAIuB,OAJvBA,GAIuB,CACvB,sCACKG,aAAa,CAAbA,SAAAA,CADE,MACFA,CADL,EAEM,GAAG,GAAH,SAAA,CAAoB,CAAEC,MAAM,CAAEJ,GAAV,CAApB,CAAJ,IAFF,EAID","sourcesContent":["import { CommonActions, NavigationState } from '@react-navigation/native';\n\nexport function navigate({\n  routeName,\n  params,\n  key,\n  action,\n}: {\n  routeName: string;\n  params?: object;\n  key?: string;\n  action?: never;\n}): CommonActions.Action {\n  if (action !== undefined) {\n    throw new Error(\n      'Sub-actions are not supported for `navigate`. Remove the `action` key from the options.'\n    );\n  }\n\n  return CommonActions.navigate({\n    name: routeName,\n    key: key,\n    params: params,\n  });\n}\n\nexport function back(options?: { key?: null | string }) {\n  return options?.key != null\n    ? (state: NavigationState) => ({\n        ...CommonActions.goBack(),\n        source: options.key,\n        target: state.key,\n      })\n    : CommonActions.goBack();\n}\n\nexport function setParams({\n  params,\n  key,\n}: {\n  params: object;\n  key?: string;\n}): CommonActions.Action {\n  return {\n    ...CommonActions.setParams(params),\n    ...(key !== undefined ? { source: key } : null),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}