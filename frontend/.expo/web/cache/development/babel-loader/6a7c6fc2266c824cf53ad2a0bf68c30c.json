{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as t from \"./actionTypes\";\nimport { service } from \"../service\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\n\nvar setLoginState = function setLoginState(loginData) {\n  return {\n    type: t.SET_LOGIN_STATE,\n    payload: loginData\n  };\n};\n\nexport var login = function login(loginInput) {\n  return function (dispatch) {\n    return axios.post(\"http://localhost:3000/auth/login\", loginInput).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if (json.msg === 'success') {\n        dispatch(setLoginState(_objectSpread(_objectSpread({}, json), {}, {\n          userId: username\n        })));\n      } else {\n        Alert.alert('Login Failed', 'Username or Password is incorrect');\n      }\n    }).catch(function (err) {\n      Alert.alert('Login Failed', 'Some error occured, please retry');\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/yhlau/Arthur/project/wysfyp/frontend/plugin/redux/action.js"],"names":["t","service","axios","setLoginState","loginData","type","SET_LOGIN_STATE","payload","login","loginInput","dispatch","post","then","response","json","msg","userId","username","Alert","alert","catch","err","console","log"],"mappings":";;;;;;AAAA,OAAO,KAAKA,CAAZ;AAEA,SAAOC,OAAP;;AAIA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEL,CAAC,CAACM,eADH;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALH;;AA6DA,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAACC,UAAD,EAAgB;AAEnC,SAAO,UAACC,QAAD,EAAc;AACnB,WAAOR,KAAK,CAACS,IAAN,CAAW,kCAAX,EAA8CF,UAA9C,EACJG,IADI,CACC,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADD,EAEJF,IAFI,CAEC,UAACE,IAAD,EAAU;AACd,UAAIA,IAAI,CAACC,GAAL,KAAa,SAAjB,EAA4B;AAC1BL,QAAAA,QAAQ,CAACP,aAAa,iCAAMW,IAAN;AAAYE,UAAAA,MAAM,EAAEC;AAApB,WAAd,CAAR;AACD,OAFD,MAEO;AACLC,QAAAA,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B,mCAA5B;AACD;AACF,KARI,EASJC,KATI,CASE,UAACC,GAAD,EAAS;AACdH,MAAAA,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B,kCAA5B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAZI,CAAP;AAaD,GAdD;AAeD,CAjBM","sourcesContent":["import * as t from './actionTypes';\n\nimport{service} from '../service';\n\nimport { Alert } from 'react-native'; // to show alerts in app\n\nimport axios from \"axios\";\n\n// this is what our action should look like which dispatches the \"payload\" to reducer\nconst setLoginState = (loginData) => {\n    return {\n      type: t.SET_LOGIN_STATE,\n      payload: loginData,\n    };\n  };\n// export function login(input){\n//   console.log(input);\n// }\n// export function login(loginInput){\n//   const { username, password } = loginInput;\n//   console.log('xd');\n//   console.log(loginInput);\n//   // return axios.post('http://localhost:3000/auth/login',loginInput)\n//   //   .then((res) => {\n//   //     console.log(res.data)\n//   // }).catch((error) => {\n//   //     console.log(error)\n//   // });\n\n//   return (dispatch) => {  // don't forget to use dispatch here!\n//     return axios.post('http://10.0.0.2:3000/auth/login', JSON.stringify(loginInput))\n//     .then(function (response) {\n//       console.log(response);\n\n//       // and create action obj here\n//       // dispatch(someAction(...))\n//   })\n//   .catch(function (error) {\n//       throw error;\n//       console.log(error);\n//   });\n//     // return await service\n//     // .post('/auth/login',{\n//     //   username:loginInput.username,\n//     //   password:loginInput.password\n//     // }).then(res => {\n//     //   // if the credential are correct\n//     //   if (res.data.success) {\n//     //     // assign the variables to state by the function 'login' in mutation\n//     //     // context.commit(\"login\", {\n//     //     //   token: res.data.data.token,\n//     //     //   user: res.data.data.userInfo[0],\n//     //     //   exp: Math.floor(Date.now() / 1000) + 60 * 360\n//     //     // });\n//     //     // // return the user information to have a signal\n//     //     // return res.data.data.user;\n//     //   } else {\n//     //     // // activate the function 'logout' in mutation\n//     //     // context.commit(\"logout\");\n//     //     // // throw error\n//     //     // throw \"Wrong username or password\";\n//     //   }\n//     // }).catch(err=>{\n//     //   throw err;\n//     // })\n    \n    \n//   };\n// };\n\nexport const login = (loginInput) => {\n  //const { username, password } = loginInput;\n  return (dispatch) => {  // don't forget to use dispatch here!\n    return axios.post(\"http://localhost:3000/auth/login\",loginInput)\n      .then((response) => response.json())\n      .then((json) => {\n        if (json.msg === 'success') { // response success checking logic could differ\n          dispatch(setLoginState({ ...json, userId: username })); // our action is called here\n        } else {\n          Alert.alert('Login Failed', 'Username or Password is incorrect');\n        }\n      })\n      .catch((err) => {\n        Alert.alert('Login Failed', 'Some error occured, please retry');\n        console.log(err);\n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}