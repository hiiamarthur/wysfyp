{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{NetworkStateType}from\"./Network.types\";export default{getIpAddressAsync:function getIpAddressAsync(){var resp,data;return _regeneratorRuntime.async(function getIpAddressAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(fetch('https://api.ipify.org?format=json'));case 3:resp=_context.sent;_context.next=6;return _regeneratorRuntime.awrap(resp.json());case 6:data=_context.sent;return _context.abrupt(\"return\",data.ip);case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);throw _context.t0;case 13:case\"end\":return _context.stop();}}},null,null,[[0,10]],Promise);},getNetworkStateAsync:function getNetworkStateAsync(){var type,isConnected,isInternetReachable;return _regeneratorRuntime.async(function getNetworkStateAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:type=navigator.onLine?NetworkStateType.UNKNOWN:NetworkStateType.NONE;isConnected=navigator.onLine;isInternetReachable=isConnected;return _context2.abrupt(\"return\",{type:type,isConnected:isConnected,isInternetReachable:isInternetReachable});case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);},getMacAddressAsync:function getMacAddressAsync(){return _regeneratorRuntime.async(function getMacAddressAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",null);case 1:case\"end\":return _context3.stop();}}},null,null,null,Promise);}};","map":{"version":3,"sources":["../src/ExpoNetwork.web.ts"],"names":[],"mappings":"4DAAA,OAAuB,gBAAvB,uBAEA,cAAe,CACP,iBADO,wOAGU,KAAK,CAAC,mCAAD,CAHf,SAGH,IAHG,gEAIU,IAAI,CAAC,IAAL,EAJV,SAIH,IAJG,+CAKF,IAAI,CAAC,EALH,yJAUP,oBAVO,2MAWL,IAXK,CAWE,SAAS,CAAC,MAAV,CAAmB,gBAAgB,CAAC,OAApC,CAA8C,gBAAgB,CAAC,IAXjE,CAYL,WAZK,CAYS,SAAS,CAAC,MAZnB,CAaL,mBAbK,CAaiB,WAbjB,kCAcJ,CACL,IAAI,CAAJ,IADK,CAEL,WAAW,CAAX,WAFK,CAGL,mBAAmB,CAAnB,mBAHK,CAdI,yEAoBP,kBApBO,+LAqBJ,IArBI,yEAAf","sourcesContent":["import { NetworkState, NetworkStateType } from './Network.types';\n\nexport default {\n  async getIpAddressAsync(): Promise<string> {\n    try {\n      const resp = await fetch('https://api.ipify.org?format=json');\n      const data = await resp.json();\n      return data.ip;\n    } catch (e) {\n      throw e;\n    }\n  },\n  async getNetworkStateAsync(): Promise<NetworkState> {\n    const type = navigator.onLine ? NetworkStateType.UNKNOWN : NetworkStateType.NONE;\n    const isConnected = navigator.onLine;\n    const isInternetReachable = isConnected;\n    return {\n      type,\n      isConnected,\n      isInternetReachable,\n    };\n  },\n  async getMacAddressAsync(): Promise<null> {\n    return null;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}